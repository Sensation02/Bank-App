// import React, { useState, useEffect, useRef } from 'react'
// import './style.scss'
// import showIcon from '../../assets/icons/show.svg'
// import hideIcon from '../../assets/icons/hide.svg'

// const REG_EXP_EMAIL = new RegExp(/^[\w-\.]+@([\w-]+\.)+[\w-]{2,}$/)

// // ====================
// const EMAIL_REGEX = /^[A-z][A-z0-9-_]{3,23}$/
// const PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/
// // ====================

// enum ErrorType {
//   INCORRECT = 'incorrect email',
//   NOT_EQUAL_PASSWORD = 'passwords is not equal',
//   PASSWORD_SIMPLE = 'password is too simple, try again',
//   PASSWORD_SHORT = 'password must be at least 8 characters long',
//   CONTAIN_BIG = 'password must contain at least one uppercase letter',
//   CONTAIN_SPECIAL = 'password must contain at least one special character',
//   CONTAIN_NUMBER = 'password must contain at least one number',
//   IS_EMPTY = 'field is empty',
//   IS_EXIST = 'user with such email is already exist',
// }

// type FieldType = 'email' | 'password' | 'text'

// interface IFieldProps {
//   type: FieldType
//   placeholder: string
//   title: string
//   onValidationChange: (isValid: boolean) => void
//   value?: string
// }

// const Field: React.FC<IFieldProps> = ({
//   title,
//   type,
//   placeholder,
//   onValidationChange,
//   value,
// }) => {
//   // =======================================================
//   // референси для інпутів та помилки (фокус)
//   const userRef = useRef() // фокус на інпуті з емейлом
//   const errRef = useRef() // фокус на помилці

//   const [user, setUser] = useState('')
//   const [validName, setValidName] = useState(false)
//   const [userFocus, setUserFocus] = useState(false)

//   const [pwd, setPwd] = useState('')
//   const [validPwd, setValidPwd] = useState(false)
//   const [pwdFocus, setPwdFocus] = useState(false)

//   const [matchPwd, setMatchPwd] = useState('')
//   const [validMatch, setValidMatch] = useState(false)
//   const [matchFocus, setMatchFocus] = useState(false)

//   const [errMsg, setErrMsg] = useState('')
//   const [success, setSuccess] = useState(false)

//   useEffect(() => {
//     userRef.current.focus()
//   }, [])

//   useEffect(() => {
//     setValidName(EMAIL_REGEX.test(user))
//   }, [user])

//   useEffect(() => {
//     setValidPwd(PASSWORD_REGEX.test(pwd))
//     setValidMatch(pwd === matchPwd)
//   }, [pwd, matchPwd])

//   useEffect(() => {
//     setErrMsg('')
//   }, [user, pwd, matchPwd])

//   // стейст та ефект для зміни поля з пароля на текст (це потрібно для кнопки показу пароля)
//   const [showPassword, setShowPassword] = useState<boolean>(false)
//   useEffect(() => {
//     if (type === 'password') {
//       setShowPassword(false)
//     }
//   }, [type])

//   // Виводимо універсальне поле з урахуванням пропсів та станів
//   return (
//     <section className='field'>
//       {title ? <h3 className='field__title'>{title}</h3> : ''}
//       <input
//         type={showPassword ? 'text' : type}
//         className='field__input'
//         placeholder={placeholder}
//       />
//       {type === 'password' ? (
//         <img
//           src={showPassword ? hideIcon : showIcon}
//           alt='show/hide'
//           className='field__icon'
//           onClick={() => setShowPassword(!showPassword)}
//         />
//       ) : (
//         ''
//       )}
//       {error ? <p className='field__error'>{error}</p> : ''}
//     </section>
//   )

//   // =======================================================

//   const [error, setError] = useState<string | null>(null)

//   const validate = (value: string) => {
//     let hasError = false

//     switch (type) {
//       case 'email':
//         if (String(value).length < 1) {
//           setError(ErrorType.IS_EMPTY)
//           hasError = true
//         } else if (!value.match(REG_EXP_EMAIL)) {
//           setError(ErrorType.INCORRECT)
//           hasError = true
//         } else {
//           setError(null)
//           hasError = false
//         }
//         break
//       case 'password':
//         if (String(value).length < 1) {
//           setError(ErrorType.IS_EMPTY)
//           hasError = true
//         } else if (value.length < 8) {
//           setError(ErrorType.PASSWORD_SHORT)
//           hasError = true
//         } else if (!value.match(/[A-Z]/)) {
//           setError(ErrorType.CONTAIN_BIG)
//           hasError = true
//         } else if (!value.match(/[0-9]/)) {
//           setError(ErrorType.CONTAIN_NUMBER)
//           hasError = true
//         } else if (!value.match(/[^A-Za-z0-9]/)) {
//           setError(ErrorType.CONTAIN_SPECIAL)
//           hasError = true
//         } else {
//           setError(null)
//           hasError = false
//         }
//         break
//       case 'text':
//         if (String(value).length < 1) {
//           setError(ErrorType.IS_EMPTY)
//           hasError = true
//         } else {
//           setError(null)
//           hasError = false
//         }
//         break
//       default:
//         break
//     }

//     onValidationChange(!hasError)
//   }

//   // const [showPassword, setShowPassword] = useState<boolean>(false)

//   // useEffect(() => {
//   //   if (type === 'password') {
//   //     setShowPassword(false)
//   //   }
//   // }, [type])

//   return (
//     <div className='field'>
//       {title ? <h3 className='field__title'>{title}</h3> : ''}

//       <input
//         type={showPassword ? 'text' : type}
//         className='field__input'
//         placeholder={placeholder}
//         onChange={(e) => validate(e.target.value)}
//         value={value}
//       />
//       {type === 'password' ? (
//         <img
//           src={showPassword ? hideIcon : showIcon}
//           alt='show/hide'
//           className='field__icon'
//           onClick={() => setShowPassword(!showPassword)}
//         />
//       ) : (
//         ''
//       )}

//       {error ? <p className='field__error'>{error}</p> : ''}
//     </div>
//   )
// }

// export default Field
